<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ApexDataApi</name>
    </assembly>
    <members>
        <member name="M:ApexDataApi.Controllers.CharactersApiController.GetCharacters">
            <summary>
            Selects all Characters
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.CharactersApiController.GetCharactersByPlaytime">
            <summary>
            Sorts all Characters by Playtime
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.CharactersApiController.PostTwo(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Inserts two Characters in one operation
            </summary>
            <param name="characterList">A List of Character objects serialized from the request body</param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.CharactersApiController.Delete(System.String)">
            <summary>
            Deletes a specific Character
            </summary>
            <param name="name">Name of the character to delete (case-insensitive)</param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.CharactersApiController.Delete(System.String,System.String)">
            <summary>
            Deletes multiple Characters in one operation
            </summary>
            <param name="name1">Name of the first character to delete</param>
            <param name="name2">Name of the second character to delete</param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.Get">
            <summary>
            Selects all Players
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.Get(System.String)">
            <summary>
            Selects a Player by name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.GetRanked">
            <summary>
            Sorts all Players by Rank
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.Post(System.String,System.Int32,System.String)">
            <summary>
            Inserts a Player
            </summary>
            <param name="name">The player's name</param>
            <param name="rank">The player's rank</param>
            <param name="avatar">A link to the player's avatar image</param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.Update(System.String,System.Int32)">
            <summary>
            Updates a Player's ranking
            </summary>
            <param name="name">The name of the player to be updated</param>
            <param name="rank">The new rank</param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Controllers.PlayersApiController.UpdateMultiple(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Updates multiple Players' Rankings in one operation
            </summary>
            <param name="name1">Name of the first player to update</param>
            <param name="rank1">The new ranking</param>
            <param name="name2">Name of the second player to update</param>
            <param name="rank2">The new ranking</param>
            <returns></returns>
        </member>
        <member name="T:ApexDataApi.Controllers.PlayersController">
            <summary>
            A Controller for Player actions for the Front End
            </summary>
        </member>
        <member name="M:ApexDataApi.Models.Player.#ctor(System.String,System.Int32,System.String)">
            <summary>
            An overloaded constructor allowing PlayerName and Rank fields to be set
            </summary>
            <param name="name"></param>
            <param name="rank"></param>
            <param name="avatar"></param>
        </member>
        <member name="M:ApexDataApi.Models.Player.CompareTo(System.Object)">
            <summary>
            The CompareTo function for the IComparable interface
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.CharactersService.CalculatePlaytimeAsync(ApexDataApi.Models.Character)">
            <summary>
            Loops through a list of all players searching for a specific character
            Sums the playtime of that character across all players, updates playtime variable
            </summary>
            <param name="character"></param>
        </member>
        <member name="M:ApexDataApi.Services.CharactersService.GetCharacterList">
            <summary>
            Returns a list of all characters, calculating playtime across all players
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.CharactersService.GetCharacterListRanked">
            <summary>
            Returns a list of all characters with playtime across all players
            List is sorted in order of playtime descending
            </summary>
            <returns></returns>
        </member>
        <member name="T:ApexDataApi.Services.PlayersService">
            <summary>
            A Service containing CRUD methods and other utilities related to
            Player objects, used for both the API and Front End
            </summary>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.#ctor(Microsoft.Extensions.Options.IOptions{ApexDataApi.Models.ApexPlayerDatabaseSettings})">
            <summary>
            MongoDB connection
            </summary>
            <param name="apexPlayerDatabaseSettings"></param>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.GetAsync">
            <summary>
            Returns a list of all players
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.GetRankedListAsync">
            <summary>
            Returns a list of all players, ordered by Rank ascending
            </summary>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.GetAsyncId(System.String)">
            <summary>
            Finds a single player by ID, returns the Player object
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.GetAsync(System.String)">
            <summary>
            Finds a single player by PlayerName, returns the Player object
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.GetRank(System.Int32)">
            <summary>
            Returns the Rank of a single player
            </summary>
            <param name="rank"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.CreateAsync(ApexDataApi.Models.Player)">
            <summary>
            A method to create a player, used for the front end
            </summary>
            <param name="newPlayer"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.CreateAsync(System.String,System.Int32,System.String)">
            <summary>
            A simple method to create a player, used for the API
            Only name, rank and avatar are set, character details are left null for simplicity
            </summary>
            <param name="name"></param>
            <param name="rank"></param>
            <param name="avatar"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.UpdatePlayerAsync(ApexDataApi.Models.Player)">
            <summary>
            A method to update a player's details, used for the front end
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.UpdateRankAsync(ApexDataApi.Models.Player,System.Int32)">
            <summary>
            A method to update a single player's rank, used for the API
            The entire list of player's ranks are updated as necessary to compensate
            </summary>
            <param name="player"></param>
            <param name="newRank"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.UpdateMultipleRanksAsync(ApexDataApi.Models.Player,System.Int32,ApexDataApi.Models.Player,System.Int32)">
            <summary>
            A method to update two player's ranks at once, used for the API
            </summary>
            <param name="player1"></param>
            <param name="newrank1"></param>
            <param name="player2"></param>
            <param name="newrank2"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.RemoveAsync(System.String)">
            <summary>
            A method to remove a player by PlayerName variable, used for the API
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ApexDataApi.Services.PlayersService.RemoveAsync(ApexDataApi.Models.Player)">
            <summary>
            A method to remove a player, used for the front end
            </summary>
            <param name="player"></param>
            <returns></returns>
        </member>
    </members>
</doc>
